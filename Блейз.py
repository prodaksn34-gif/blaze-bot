import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# üîë –£–∫–∞–∂–∏ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "TELEGRAM_TOKEN"
OPENAI_API_KEY = "OPENAI_API_KEY"

# —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenAI (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å openai>=1.0.0)
client = OpenAI(api_key=OPENAI_API_KEY)

BLAZE_PROMPT = (
    "–¢—ã ‚Äî –ë–ª–µ–π–∑. –•–∞—Ä–∞–∫—Ç–µ—Ä: —Ö–æ–ª–æ–¥–Ω—ã–π, —Ä–∞—Å—Å—É–¥–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ —Ü–∏–Ω–∏—á–Ω—ã–π, "
    "–æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ, –∫–∞–∫ –≥–µ—Ä–æ–π –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∏–ª–ª–µ—Ä–∞. "
    "–ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–ª–µ–π–∑. –ì–æ–≤–æ—Ä–∏.")
    await update.message.reply_text("SMS –æ—Ç –±—É–¥—É—â–µ–≥–æ: '–°–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.'")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text or ""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å
            messages=[
                {"role": "system", "content": BLAZE_PROMPT},
                {"role": "user", "content": user_message}
            ],
            max_tokens=300,
        )
        reply = resp.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {e}")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    print("–ë–ª–µ–π–∑ –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()


